/*
 * Copyright 2025 HM Revenue & Customs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package uk.gov.hmrc.timetopayproxy.connectors

class TtpConnectorSpec extends WordSpec {
  "TtpConnector.generateQuote" should {
    "return a successful quote response" in {
      // Setup mock HTTP server
      val mockServer = new WireMockServer(8080)
      mockServer.start()
      WireMock.configure().stubFor(post(urlEqualTo("/generateQuote")).willReturn(aResponse().withStatus(200).withBody("{\"quote\": {\"id\": \"123\", \"amount\": 100}}")))

      // Create test instance
      val connector = new TtpConnector(mockServer.port())

      // Execute test
      val result = connector.generateQuote(QuoteRequest("12345", 500))

      // Verify results
      result shouldBe Right(QuoteResponse("123", 100))
      mockServer.stop()
    }

    "handle HTTP errors" in {
      // Setup mock HTTP server
      val mockServer = new WireMockServer(8080)
      mockServer.start()
      WireMock.configure().stubFor(post(urlEqualTo("/generateQuote")).willReturn(aResponse().withStatus(500)))

      // Create test instance
      val connector = new TtpConnector(mockServer.port())

      // Execute test
      val result = connector.generateQuote(QuoteRequest("12345", 500))

      // Verify results
      result shouldBe Left(HttpError("500 Internal Server Error"))
      mockServer.stop()
    }
  }
}